// npx prisma migrate dev --name Initialize the schema
// psql -h localhost -d postgres -U postgres
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String              @id @default(cuid())
  email                     String              @unique
  userName                  String              @unique
  name                      String
  password                  String
  profileImage              String
  coverImage                String?
  description               String?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  isVerified                Boolean             @default(false)
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  videos                    Video[]
  comments                  Comment[]
  playlists                 Playlist[]
  history                   viewsOnVideo[]
  watchLater                WatchLater[]
  likedVideos               likesOnVideo[]
  likedComments             likesOnComment[]
  disLikedComments          disLikesOnComment[]
  dislikedVideos            dislikesOnVideo[]
  subscribers               User[]              @relation("UserFollows")
  subscribesTo              User[]              @relation("UserFollows")
  subscribersCount          Int                 @default(0)
  subscribesToCount         Int                 @default(0)
}

model Video {
  id              String            @id @default(cuid())
  userId          String
  duration        Int
  url             String
  description     String
  status          String            @default("Public")
  category        String?
  title           String
  thumbnail       String
  isAgeRestricted Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  tags            String[]          @default([])
  user            User              @relation(fields: [userId], references: [id])
  viewsCount      Int               @default(0)
  likesCount      Int               @default(0)
  dislikesCount   Int               @default(0)
  playlists       PlaylistVideo[]
  comments        Comment[]
  views           viewsOnVideo[]
  likes           likesOnVideo[]
  dislikes        dislikesOnVideo[]
  watchLaterAddBy WatchLater[]
}

model Comment {
  id        String              @id @default(cuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  video     Video               @relation(fields: [videoId], references: [id])
  videoId   String
  likes     likesOnComment[]
  disLikes  disLikesOnComment[]
}

model likesOnComment {
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  likedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@id([commentId, userId])
}

model disLikesOnComment {
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  String
  dislikedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@id([commentId, userId])
}

model Playlist {
  id        String          @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])
  videos    PlaylistVideo[]
}

model PlaylistVideo {
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String

  @@id([videoId, playlistId])
}

model viewsOnVideo {
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String
  viewdAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@id([videoId, userId])
}

model likesOnVideo {
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String
  likedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@id([videoId, userId])
}

model dislikesOnVideo {
  video      Video    @relation(fields: [videoId], references: [id])
  videoId    String
  dislikedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@id([videoId, userId])
}

model WatchLater {
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String
  addedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
  userId  String

  @@id([videoId, userId])
}
